#!/usr/bin/python3
#
# README
# ------
#
# Test rate limit in LDMS (via Python)
#
# pysub@node-1
#   ^
#   |
# pypub@node-1

import os
import io
import re
import pwd
import pdb
import sys
import json
import time
import atexit
import argparse
import TADA
import logging

from distutils.spawn import find_executable
from LDMS_Test import LDMSDCluster, LDMSDContainer, process_args, \
                      add_common_args, jprint, parse_ldms_ls, PyPty, \
                      MsgData, LdmsAddr

if __name__ != "__main__":
    raise RuntimeError("This should not be impoarted as a module.")

class Debug(object):
    pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

#### default values #### ---------------------------------------------
sbin_ldmsd = find_executable("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

#### argument parsing #### -------------------------------------------
ap = argparse.ArgumentParser(description = "Test ldms_msg features with ldmsd")
add_common_args(ap)
args = ap.parse_args()
process_args(args)

#### config variables #### ------------------------------
USER = args.user
PREFIX = args.prefix
COMMIT_ID = args.commit_id
SRC = args.src
CLUSTERNAME = args.clustername
DB = args.data_root
LDMSD_PORT = 10000

#### spec #### -------------------------------------------------------

def munge_key(i):
    return '0'*1024

common_plugin_config = [
        "component_id=%component_id%",
        "instance=%hostname%/%plugin%",
        "producer=%hostname%",
    ]
base_daemons = [
        {
            "name" : "munged",
            "type" : "munged",
            "key"  : munge_key(0),
        },
    ]
spec = {
    "name" : CLUSTERNAME,
    "description" : "{}'s ldms_msg test cluster".format(USER),
    "type" : "NA",
    "templates" : { # generic template can apply to any object by "!extends"
        "compute_node" : {
            "daemons" : base_daemons ,
        },
    }, # templates
    "nodes" : [
        {
            "hostname" : f"node-1",
            "!extends" : "compute_node",
        },
    ], # nodes

    "cap_add": [ "SYS_PTRACE", "SYS_ADMIN" ],
    "image": args.image,
    "ovis_prefix": PREFIX,
    "env" : {
        "FOO": "BAR" ,
        "LDMS_STREAM_STATS_LEVEL" : "2",
    },
    "mounts": [
        "{}:/db:rw".format(DB),
        "{0}:{1}:ro".format(os.path.realpath(sys.path[0]), "/tada-src"),
    ] + args.mount +
    ( ["{0}:{0}:ro".format(SRC)] if SRC else [] ),
}

#### helper functions ####


#### test definition ####

test = TADA.Test(test_suite = "LDMSD",
                 test_type = "FVT",
                 test_name = "ldms_rate_test",
                 test_desc = "Test rate limit in LDMS",
                 test_user = args.user,
                 commit_id = COMMIT_ID,
                 tada_addr = args.tada_addr)

test.add_assertion( 1, "Publisher cannot publish all data (rail rate limit)")
test.add_assertion( 2, "Publisher get a rate limit error")
test.add_assertion( 3, "After the wait, the publisher can publish")
test.add_assertion( 4, "Publisher cannot publish all data (msg rate limit)")
test.add_assertion( 5, "Publisher get a rate limit error (by channel)")
test.add_assertion( 6, "After the wait, the publisher can publish (by channel)")

cluster = None
test.start()

@atexit.register
def at_exit():
    rc = test.finish()
    if cluster is not None:
        cluster.remove()
    os._exit(rc)

log.info("-- Get or create the cluster --")
cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

node1 = cluster.get_container("node-1")
nodes = [ node1 ]

log.info("-- Start daemons --")
cluster.start_daemons()

log.info("... wait a bit to make sure ldmsd's are up")
time.sleep(2)

RAIL_RATE = 64
STREAM_RATE = 32

pypub = PyPty(node1, "/tada-src/python/ldms_rate.py")
pysub = PyPty(node1, "/tada-src/python/ldms_rate.py")

pypub.cmd("listen()")
time.sleep(2)
pysub.cmd("connect()")
time.sleep(2)
pysub.cmd("sub_routine()")
time.sleep(2)
pypub.cmd("pub_routine()", retry = 100)
time.sleep(2)

subdata0 = [ pysub.cmd("cli0.get_data()") for i in range(0, 16) ]
subobjs0 = [ eval(o) for o in subdata0 if o ]
recs0 = [ o.data for o in subobjs0 ]

subdata1 = [ pysub.cmd("cli1.get_data()") for i in range(0, 16) ]
subobjs1 = [ eval(o) for o in subdata1 if o ]
recs1 = [ o.data for o in subobjs1 ]

x_28 = 28 * 'x' # the data after the wait
set_full = set([ 16*f"{I:x}" for I in range(0, 16) ])
set_0 = set(recs0) - set([ x_28 ])
set_1 = set(recs1) - set([ x_28 ])

# test.add_assertion( 1, "Sampler cannot publish all data (rate limit)")
while True: # will break
    if not set_0:
        test.assert_test(1, False, "empty msg data")
        break
    if set_0 - set_full:
        test.assert_test(1, False, "Got extra data: {set_0 - set_full}")
        break
    _len = sum( len(o) for o in set_0 )
    if _len > 2*RAIL_RATE:
        test.assert_test(1, False, "msg data received is greater than the recv limit")
        break
    test.assert_test(1, True, "received msg data is limited")
    break

# test.add_assertion( 2, "Publisher get a rate limit error")
while True: # will break
    out = pypub.cmd('err0')
    err = eval(out)
    if type(err) is not list:
        test.assert_test(2, False, f"bad error list, out: {out}")
        break
    if len(err) == 0: # no error ..
        test.assert_test(2, False, f"no expected error")
        break
    test.assert_test(2, True, "publisher got rate limit errors")
    break

# test.add_assertion( 3, "After the wait, the sampler can publish")
if x_28 in recs0:
    test.assert_test(3, True, "msg data received")
else:
    test.assert_test(3, False, "msg data not received")

# test.add_assertion( 4, "Publisher cannot publish all data (msg rate limit)")
while True: # will break
    if not set_1:
        test.assert_test(4, False, "empty msg data")
        break
    if set_1 - set_full:
        test.assert_test(4, False, "Got extra data: {set_1 - set_full}")
        break
    _len = sum( len(o) for o in set_1 )
    if _len > 2*STREAM_RATE:
        test.assert_test(4, False, "msg data received is greater than the recv limit")
        break
    test.assert_test(4, True, "received msg data is limited")
    break

# test.add_assertion( 5, "Publisher get a rate limit error (by channel)")
while True: # will break
    out = pypub.cmd('err1')
    err = eval(out)
    if type(err) is not list:
        test.assert_test(5, False, f"bad error list, out: {out}")
        break
    if len(err) == 0: # no error ..
        test.assert_test(5, False, f"no expected error")
        break
    test.assert_test(5, True, "publisher got rate limit errors")
    break

# test.add_assertion( 6, "After the wait, the publisher can publish (by channel)")
if x_28 in recs1:
    test.assert_test(6, True, "msg data received")
else:
    test.assert_test(6, False, "msg data not received")

# see at_exit()
