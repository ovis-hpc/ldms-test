#!/usr/bin/env python3

# The script tests the updtr_status configuration command

import argparse
import atexit
import logging
import json
import os
import TADA

from distutils.spawn import find_executable
from LDMS_Test import LDMSDCluster, LDMSDContainer, process_args, \
                      add_common_args, assertion_id_get, \
                      create_updtr_status, create_updtr_prdcr_status
import sys
import errno

if __name__ != "__main__":
    raise RuntimeError("This should not be imported as a module.")

class Debug(object):
    pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

SCRIPT_DIR = os.path.realpath(sys.path[0])

#### default values #### ---------------------------------------------
sbin_ldmsd = find_executable("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

LDMSD_PORT = 10000
LDMSD_XPRT = "sock"
RECONNECT_TIME = 1000000
UPDT_INTERVAL = 1000000
UPDT_OFFSET = 100000

id = assertion_id_get()
# updtr_status
STATUS_NO_UPDTRS             = next(id)
STATUS_GIVEN_UPDTR_NOT_EXIST = next(id)
STATUS_GIVEN_UPDTR_EXIST     = next(id)
STATUS_SINGLE_UPDTR          = next(id)
STATUS_MULTIPLE_UPDTRS       = next(id)

common_plugin_config = [
    "component_id=%component_id%",
    "instance=%hostname%/%plugin%",
    "producer=%hostname%",
]

spec = {
    "name" : "REPLACE_ME",
    "description" : "updtr_cmd_test cluster",
    "type" : "NA",
    "templates" : {
        "compute-node" : {
            "daemons" : [
                {
                    "name" : "sshd", # for debugging
                    "type" : "sshd",
                },
                {
                    "name" : "sampler-daemon",
                    "!extends" : "ldmsd-sampler",
                }
            ]
        },
        "sampler_plugin" : {
            "interval" : 1000000,
            "offset" : 0,
            "config" : common_plugin_config,
            "start" : True,
        },
        "ldmsd-base" : {
            "type" : "ldmsd",
            "listen" : [
                { "port" : "%l_port%", "xprt" : LDMSD_XPRT }
            ]
        },
        "ldmsd-sampler" : {
            "!extends" : "ldmsd-base",
            "l_port" : LDMSD_PORT,
            "samplers" : [
                {
                    "plugin" : "meminfo",
                    "!extends" : "sampler_plugin",
                },
                {
                    "plugin" : "vmstat",
                    "!extends" : "sampler_plugin",
                }
            ]
        },
        "prdcr" : {
            "host" : "%name%",
            "xprt" : LDMSD_XPRT,
            "port" : LDMSD_PORT,
            "type" : "active",
            "interval" : RECONNECT_TIME,
        },
        "ldmsd-agg" : {
            "!extends" : "ldmsd-base",
            "prdcrs" : [
                {
                    "name" : "sampler-1",
                    "!extends" : "prdcr"
                },
                {
                    "name" : "sampler-2",
                    "!extends" : "prdcr",
                }
            ],
        },
    },
    "nodes" : [
        {
            "hostname" : "sampler-1",
            "component_id" : 10001,
            "!extends" : "compute-node",
        },
        {
            "hostname" : "sampler-2",
            "component_id" : 10002,
            "!extends" : "compute-node",
        },
        {
            "hostname" : "L1",
            "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd"
                },
                {
                    "name" : "agg11",
                    "l_port" : LDMSD_PORT,
                    "!extends" : "ldmsd-agg",
                    "updtr_interval" : UPDT_INTERVAL,
                    "updtr_offset" : UPDT_OFFSET,
                    "config" : [
                        "prdcr_start_regex regex=.*",
                        "updtr_add name=meminfo interval=%updtr_interval% " \
                                   "offset=%updtr_offset%",
                        "updtr_prdcr_add name=meminfo regex=.*",
                        "updtr_match_add name=meminfo match=schema regex=meminfo",
                        "updtr_start name=meminfo",
                        "updtr_add name=sampler-2 interval=%updtr_interval% " \
                                   "offset=%updtr_offset%",
                        "updtr_prdcr_add name=sampler-2 regex=^sampler-2$",
                        "updtr_match_add name=sampler-2 regex=vmstat match=schema"
                    ]
                },
            ]
        },
        {
            "hostname" : "L2",
            "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd"
                },
                {
                    "name" : "agg21",
                    "l_port" : LDMSD_PORT,
                    "!extends" : "ldmsd-base",
                    "prdcrs" : [
                        {
                            "name" : "agg11",
                            "host" : "L1",
                            "xprt" : LDMSD_XPRT,
                            "port" : LDMSD_PORT,
                            "type" : "active",
                            "interval" : RECONNECT_TIME,
                        },
                    ],
                    "updtr_interval" : UPDT_INTERVAL,
                    "updtr_offset" : UPDT_OFFSET * 2,
                    "config" : [
                        "prdcr_start_regex regex=.*",
                        "updtr_add name=agg11 interval=%updtr_interval% " \
                                  "offset=%updtr_offset%",
                        "updtr_prdcr_add name=agg11 regex=.*",
                        "updtr_start name=agg11"
                    ]
                }
            ]
        }
    ],

    "cap_add" : ["SYS_PTRACE"],
    "image" : None,
    "ovis_prefix" : "REPLACE_ME",
    "mounts" : [],
    "env" : {}
}

@atexit.register
def at_exit():
    rc = test.finish()
    if cluster is not None:
        cluster.remove()
    os._exit(rc)

def ldmsd_request_send(dcont, port, cmd):
    x = "/db/ldmsd_request_send.py -x {xprt} -p {port} -H localhost --cmd '{cmd}'" \
        .format(xprt = LDMSD_XPRT, port = port,
                                     cmd = cmd)
    rc, out = dcont.exec_run(x)
    return (rc, out)

def get_updtr_status(dcont, port = LDMSD_PORT, name = None):
    if name is None:
        cmd = "updtr_status"
    else:
        cmd = "updtr_status name={}".format(name)
    (rc, out) = ldmsd_request_send(dcont, port, cmd)
    return (rc, out.strip())

if __name__ == "__main__":
    if sys.flags.interactive:
        exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

    #### argument parsing #### -------------------------------------------
    ap = argparse.ArgumentParser(description = "Test the configuration command updtr_status")
    add_common_args(ap)
    args = ap.parse_args()
    process_args(args)

    spec["ovis_prefix"] = args.prefix
    spec["name"] = args.clustername
    spec["mounts"] += args.mount + ["{}:/db:rw".format(args.data_root)]
    if args.src:
        spec["mounts"] += { "{0}:{0}:ro".format(args.src)}
    spec["env"]["TADA_USER"] = args.user
    spec["env"]["TADA_ADDR"] = args.tada_addr
    spec["image"] = args.image

    #### Test Definition ####
    test = TADA.Test(test_suite = "LDMSD",
                     test_type = "FVT",
                     test_name = "updtr_status test",
                     test_desc = "Test updtr_status",
                     test_user = args.user,
                     commit_id = args.commit_id,
                     tada_addr = args.tada_addr,
                     )

    test.add_assertion(STATUS_NO_UPDTRS,
                       "Send 'updtr_status' to an LDMSD without any Updaters")
    test.add_assertion(STATUS_GIVEN_UPDTR_NOT_EXIST,
                       "Send 'updtr_status name=foo', where updtr 'foo' doesn't exist.")
    test.add_assertion(STATUS_GIVEN_UPDTR_EXIST,
                       "Send 'updtr_status name=all', where 'all' exists.")
    test.add_assertion(STATUS_SINGLE_UPDTR,
                       "Send 'updtr_status' to an LDMSD with a single Updater")
    test.add_assertion(STATUS_MULTIPLE_UPDTRS,
                       "Send 'updtr_status' to an LDMSD with 2 updaters")

    # --------------------------------------------------------------------------
    log.info("-- Get or create the cluster --")

    cluster = None
    test.start()

    cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

    smplr1 = cluster.get_container("sampler-1")
    smplr2 = cluster.get_container("sampler-2")
    l1 = cluster.get_container("L1")
    l2 = cluster.get_container("L2")
    containers = [smplr1, smplr2, l1, l2]

    for c in containers:
        c.write_file("/db/ldmsd_request_send.py", open(SCRIPT_DIR + "/ldmsd_request_send.py").read())
        c.exec_run("chmod 755 /db/ldmsd_request_send.py")

    log.info("-- Start daemons --")
    cluster.start_daemons()
    cluster.make_known_hosts()

    log.info("Waiting ... for all LDMSDs to start")
    while True:
        for c in containers:
            if c.check_ldmsd() is False:
                sleep(1)
                break
        break
    log.info("All LDMSDs are up.")

# ---------------- updtr_status
    (rc, no_updtr) = get_updtr_status(smplr1)
    exp = "[]"
    test.assert_test(STATUS_NO_UPDTRS, no_updtr == exp, no_updtr)

    (rc, not_existing) = get_updtr_status(smplr2, name = "foo")
    exp = "updtr 'foo' doesn't exist."
    test.assert_test(STATUS_GIVEN_UPDTR_NOT_EXIST, (rc != 0 and not_existing == exp),
                     "report({}) == expect({})".format(not_existing, exp))

    (rc, existing) = get_updtr_status(l1, name = "meminfo")
    updtr = json.loads(existing)
    exp_updtr = [create_updtr_status(
                    name = "meminfo",
                    interval = UPDT_INTERVAL,
                    offset = UPDT_OFFSET,
                    state = "RUNNING",
                    prdcrs = [
                        create_updtr_prdcr_status(
                            name = "sampler-1",
                            host = "sampler-1",
                            port = LDMSD_PORT,
                            xprt = LDMSD_XPRT,
                            state = "CONNECTED"),
                        create_updtr_prdcr_status(
                            name = "sampler-2",
                            host = "sampler-2",
                            port = LDMSD_PORT,
                            xprt = LDMSD_XPRT,
                            state = "CONNECTED"),
                    ])
                ]
    test.assert_test(STATUS_GIVEN_UPDTR_EXIST, updtr == exp_updtr, "report({}) == expect({})" \
                                                            .format(updtr, exp_updtr))

    (rc, no_arg) = get_updtr_status(l2)
    updtr = json.loads(no_arg)
    exp_updtr = [create_updtr_status(
                    name = "agg11",
                    interval = UPDT_INTERVAL,
                    offset = UPDT_OFFSET * 2,
                    state = "RUNNING",
                    prdcrs = [
                        create_updtr_prdcr_status(
                            name = "agg11",
                            host = "L1",
                            port = LDMSD_PORT,
                            xprt = LDMSD_XPRT,
                            state = "CONNECTED")
                    ])
                ]
    test.assert_test(STATUS_SINGLE_UPDTR, updtr == exp_updtr,
                     "report({}) == expect({})".format(updtr, exp_updtr))

    (rc, multi) = get_updtr_status(l1)
    updtr = json.loads(multi)
    exp_updtr = [create_updtr_status(
                    name = "meminfo",
                    interval = UPDT_INTERVAL,
                    offset = UPDT_OFFSET,
                    state = "RUNNING",
                    prdcrs = [
                        create_updtr_prdcr_status(
                            name = "sampler-1",
                            host = "sampler-1",
                            port = LDMSD_PORT,
                            xprt = LDMSD_XPRT,
                            state = "CONNECTED"),
                        create_updtr_prdcr_status(
                            name = "sampler-2",
                            host = "sampler-2",
                            port = LDMSD_PORT,
                            xprt = LDMSD_XPRT,
                            state = "CONNECTED"),
                    ]),
                 create_updtr_status(
                    name = "sampler-2",
                    interval = UPDT_INTERVAL,
                    offset = UPDT_OFFSET,
                    state = "STOPPED",
                    prdcrs = [
                        create_updtr_prdcr_status(
                            name = "sampler-2",
                            host = "sampler-2",
                            port = LDMSD_PORT,
                            xprt = LDMSD_XPRT,
                            state = "CONNECTED"),
                    ]),
                ]
    test.assert_test(STATUS_MULTIPLE_UPDTRS, updtr == exp_updtr,
                     "report({}) == expect({})".format(updtr, exp_updtr))

    log.info("--- done ---")
