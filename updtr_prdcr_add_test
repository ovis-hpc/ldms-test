#!/usr/bin/env python3

# The script tests the updtr_prdcr_add configuration command

import argparse
import atexit
import errno
import logging
import json
import os
import sys
import TADA

from distutils.spawn import find_executable
from LDMS_Test import LDMSDCluster, LDMSDContainer, process_args, \
                      add_common_args, assertion_id_get, \
                      create_updtr_status, create_updtr_prdcr_status

if __name__ != "__main__":
    raise RuntimeError("This should not be imported as a module")

class Debug(object):
    pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

SCRIPT_DIR = os.path.realpath(sys.path[0])

#### default values #### ---------------------------------------------
sbin_ldmsd = find_executable("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

LDMSD_PORT = 10000
LDMSD_XPRT = "sock"
RECONNECT_TIME = 1000000
UPDT_INTERVAL = 1000000
UPDT_OFFSET = 100000

id = assertion_id_get()

INVALID_REGEX = next(id)
REGEX_MATCH_NO_PRDCR = next(id)
REGEX_MATCH_SOME_PRDCRS = next(id)
RUNNING_UPDTR = next(id)
NOT_EXISTING_UPDTR = next(id)

common_plugin_config = [
    "component_id=%component_id%",
    "instance=%hostname%/%plugin%",
    "producer=%hostname%",
]

spec = {
    "name" : "REPLACE_ME",
    "description" : "updtr_prdcdr_add_test cluster",
    "type" : "NA",
    "templates" : {
        "compute-node" : {
            "daemons" : [
                {
                    "name" : "sshd", # for debugging
                    "type" : "sshd",
                },
                {
                    "name" : "sampler-daemon",
                    "!extends" : "ldmsd-sampler",
                }
            ]
        },
        "sampler_plugin" : {
            "interval" : 1000000,
            "offset" : 0,
            "config" : common_plugin_config,
            "start" : True,
        },
        "ldmsd-base" : {
            "type" : "ldmsd",
            "listen" : [
                { "port" : LDMSD_PORT, "xprt" : LDMSD_XPRT }
            ]
        },
        "ldmsd-sampler" : {
            "!extends" : "ldmsd-base",
            "samplers" : [
                {
                    "plugin" : "meminfo",
                    "!extends" : "sampler_plugin",
                },
                {
                    "plugin" : "vmstat",
                    "!extends" : "sampler_plugin",
                }
            ]
        },
        "prdcr" : {
            "host" : "%name%",
            "xprt" : LDMSD_XPRT,
            "port" : LDMSD_PORT,
            "type" : "active",
            "interval" : RECONNECT_TIME,
        },
        "ldmsd-agg" : {
            "!extends" : "ldmsd-base",
            "prdcrs" : [
                {
                    "name" : "sampler-1",
                    "!extends" : "prdcr"
                },
                {
                    "name" : "sampler-2",
                    "!extends" : "prdcr",
                }
            ],
        },
    },
    "nodes" : [
        {
            "hostname" : "sampler-1",
            "component_id" : 10001,
            "!extends" : "compute-node",
        },
        {
            "hostname" : "sampler-2",
            "component_id" : 10002,
            "!extends" : "compute-node",
        },
        {
            "hostname" : "agg",
            "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd"
                },
                {
                    "name" : "agg",
                    "!extends" : "ldmsd-agg",
                    "config" : [
                        "prdcr_start_regex regex=.*",
                        "updtr_add name=all interval={} offset={}" \
                                .format(UPDT_INTERVAL, UPDT_OFFSET),
                        "updtr_add name=running interval={} offset={}" \
                                .format(UPDT_INTERVAL, UPDT_OFFSET),
                        "updtr_prdcr_add name=running regex=0",
                        "updtr_start name=running"
                    ]
                },
            ]
        },
    ],

    "cap_add" : ["SYS_PTRACE"],
    "image" : None,
    "ovis_prefix" : "REPLACE_ME",
    "mounts" : [],
    "env" : {}
}

@atexit.register
def at_exit():
    rc = test.finish()
    if cluster is not None:
        cluster.remove()
    os._exit(rc)

def ldmsd_request_send(dcont, cmd):
    x = "/db/ldmsd_request_send.py -x {xprt} -p {port} -H localhost --cmd '{cmd}'" \
        .format(xprt = LDMSD_XPRT, port = LDMSD_PORT, cmd = cmd)
    rc, out = dcont.exec_run(x)
    return (rc, out)

def get_updtr_status(dcont, name = None):
    if name is None:
        cmd = "updtr_status"
    else:
        cmd = "updtr_status name={}".format(name)
    (rc, out) = ldmsd_request_send(dcont, cmd)
    return (rc, out.strip())

def updtr_prdcr_add(dcont, name, regex):
    cmd = "updtr_prdcr_add name={} regex={}".format(name, regex)
    (rc, out) = ldmsd_request_send(dcont, cmd)
    return (rc, out.strip())

if __name__ == "__main__":
    if sys.flags.interactive:
        exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

    #### argument parsing #### -------------------------------------------
    ap = argparse.ArgumentParser(description = "Test the configuration command updtr_status")
    add_common_args(ap)
    args = ap.parse_args()
    process_args(args)

    spec["ovis_prefix"] = args.prefix
    spec["name"] = args.clustername
    spec["mounts"] += args.mount + ["{}:/db:rw".format(args.data_root)]
    if args.src:
        spec["mounts"] += { "{0}:{0}:ro".format(args.src)}
    spec["env"]["TADA_USER"] = args.user
    spec["env"]["TADA_ADDR"] = args.tada_addr
    spec["image"] = args.image

    #### Test Definition ####
    test = TADA.Test(test_suite = "LDMSD",
                     test_type = "FVT",
                     test_name = "updtr_add test",
                     test_desc = "Test updtr_add",
                     test_user = args.user,
                     commit_id = args.commit_id,
                     tada_addr = args.tada_addr,
                     )

    test.add_assertion(INVALID_REGEX,
                       "Send updtr_prdcr_add with an invalid regex")
    test.add_assertion(REGEX_MATCH_NO_PRDCR,
                       "Send updtr_prdcr_add with a regex matching no prdcrs")
    test.add_assertion(REGEX_MATCH_SOME_PRDCRS,
                       "Send updtr_prdcdr_add with a regex matching some prdcrs")
    test.add_assertion(RUNNING_UPDTR,
                       "Send updtr_prdcdr_add to a running updtr")
    test.add_assertion(NOT_EXISTING_UPDTR,
                       "Send updtr_prdcr_add to a not-existing updtr")

    # --------------------------------------------------------------------------
    log.info("-- Get or create the cluster --")

    cluster = None
    test.start()

    cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

    smplr1 = cluster.get_container("sampler-1")
    smplr2 = cluster.get_container("sampler-2")
    agg = cluster.get_container("agg")
    containers = [smplr1, smplr2, agg]

    for c in containers:
        c.write_file("/db/ldmsd_request_send.py", open(SCRIPT_DIR + "/ldmsd_request_send.py").read())
        c.exec_run("chmod 755 /db/ldmsd_request_send.py")

    log.info("-- Start daemons --")
    cluster.start_daemons()
    cluster.make_known_hosts()

    log.info("Waiting ... for all LDMSDs to start")
    while True:
        for c in containers:
            if c.check_ldmsd() is False:
                sleep(1)
                break
        break
    log.info("All LDMSDs are up.")

    # Invalid regex
    (rc, out) = updtr_prdcr_add(agg, name = "all", regex = "[")
    test.assert_test(INVALID_REGEX, rc == errno.EINVAL,
                     "report(rc = {}) == expect(rc = {})".format(rc, errno.EINVAL))

    # regex not matched any producers
    (rc, out) = updtr_prdcr_add(agg, name = "all", regex = "aaa")
    (_, status) = get_updtr_status(agg, name = "all")
    status = json.loads(status)
    exp_status = [create_updtr_status(name = "all", interval = UPDT_INTERVAL,
                                     offset = UPDT_OFFSET, state = "STOPPED",
                                     prdcrs = [])
                ]
    test.assert_test(REGEX_MATCH_NO_PRDCR, rc == 0 and status == exp_status,
                     "report(rc = {}, status = {}) == expect(rc = {}, status = {})" \
                     .format(rc, status, 0, exp_status))

    # regex matched some producers
    (rc, out) = updtr_prdcr_add(agg, name = "all", regex = "1")
    (_, status) = get_updtr_status(agg, name = "all")
    status = json.loads(status)
    exp_status = [create_updtr_status(name = "all", interval = UPDT_INTERVAL,
                                     offset = UPDT_OFFSET, state = "STOPPED",
                                     prdcrs = [
                                         create_updtr_prdcr_status(
                                             name = "sampler-1",
                                             host = "sampler-1",
                                             port = LDMSD_PORT,
                                             xprt = LDMSD_XPRT,
                                             state = "CONNECTED")
                                        ])
                ]
    test.assert_test(REGEX_MATCH_SOME_PRDCRS, rc == 0 and status == exp_status,
                     "report(rc = {}, status = {}) == expect(rc = {}, status = {})" \
                     .format(rc, status, 0, exp_status)) 

    # running updater
    (rc, out) = updtr_prdcr_add(agg, name = "running", regex = ".*")
    test.assert_test(RUNNING_UPDTR, rc == errno.EBUSY,
                     "report(rc = {}) == expect(rc = {})".format(rc, errno.EBUSY))

    # not-existing updater
    (rc, out) = updtr_prdcr_add(agg, name = "foo", regex = ".*")
    test.assert_test(NOT_EXISTING_UPDTR, rc == errno.ENOENT,
                     "report(rc = {}) == expect(rc = {})".format(rc, errno.ENOENT))

    log.info("--- done ---")

