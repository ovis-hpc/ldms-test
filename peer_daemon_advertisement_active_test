#!/usr/bin/env python3

import argparse
import atexit
import errno
import json
import logging
import os
import shutil
import sys
import time

import TADA

from LDMS_Test import LDMSDCluster,LDMSDContainer, process_args, \
                      add_common_args

# Scenarios needed to be tested
# - sampler daemon starts before L1
#   - Sampler daemon periodically tries to reconnect until L1 starts
#   - L1 creates the producer with a correct name?
#   - L1 starts the producer
#   - L1 collects the producer's sets
#   - L1 updates the producer's sets
# - L1 starts before sampler daemon
# - After L1 collects the sets,
#   - Sampler daemon is gone
#     - On L1,
#           - the producer is in the DISCONNECTED state
#           - The sets are gone
#     - On L2,
#           - the sets are gone
#   - Sampler daemon revives
#     - The producer state is moved to the CONNECTED state
#     - The sets are collected
#   - L1 is gone
#     - sampler daemon periodically reconnects to L1 until L1 is back
#   - L1 is revived
#     - L1 connected to sampler
#     - L1 collects the sets
#
# - sampler advertises to multiple L1
#
# - Agg have multiple prdcr_listens.
#   - condition overlapped
#   - conditions have conflicts
#
# Test cases
# prdcr_listen
# - prdcr_listen with no restrictions
# - prdcr_listen with IP masks
# - prdcr_listen with regex matching hostnames
# advertiser_start
# - Return an error when connect to unresolve address

if __name__ != "__main__":
        raise RuntimeError("This should not be imported as a module.")

class Debug(object):
        pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

#### default values #### ---------------------------------------------
sbin_ldmsd = shutil.which("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

LDMSD_PORT = 10000
LDMSD_DATA_PORT = 10001
LDMSD_XPRT = "sock"
RECONNECT_US = 200000
SAMPLE_US = UPDATE_US = 1000000
SAMPLER_PI = ["meminfo", "vmstat"]

HOSTNAME_REGEX = '^node-3$'
CIDR = None

#### argument parsing #### -------------------------------------------
ap = argparse.ArgumentParser(description = "Test the Peer Daemon Advertisement in the Active Mode" )
add_common_args(ap)
args = ap.parse_args()
process_args(args)

#### config variables #### ------------------------------
USER = args.user
PREFIX = args.prefix
COMMIT_ID = args.commit_id
SRC = args.src
CLUSTERNAME = args.clustername

#### spec #### -------------------------------------------------------
def dom_name(num):
    return f"dom-{num}"

def dom_sock(num):
    return f"/munge/{dom_name(num)}/sock"

def dom_key(num):
    return str(num)*4096

NUM_COMPUTE = 4

PRDCR_LISTEN_ADD = {
    'xprt' : LDMSD_XPRT,
    'port' : LDMSD_PORT,
    'reconnect' : RECONNECT_US,
    'type' : 'active'
}

common_plugin_config = [
        "component_id=%component_id%",
        "instance=%hostname%/%plugin%",
        "producer=%hostname%",
]

spec = {
    "name" : CLUSTERNAME,
    "description" : "{}'s Peer Daemon Advertisement Cluster".format(USER),
    "type" : "NA",
    "templates" : { # generic template can apply to any object by "!extends"
        "sampler_plugin" : {
            "interval" : SAMPLE_US,
            "config" : common_plugin_config,
            "start" : True,
        },
        "ldmsd-base" : {
            "type" : "ldmsd",
            "listen" : [
                { "port" : LDMSD_PORT, "xprt" : LDMSD_XPRT },
            ],
        },
        "ldmsd-base-auth" : {
            "type" : "ldmsd",
            "auth" : [
                {
                        "name" : "dom-comm",
                        "plugin" : "munge",
                        "socket" : dom_sock(1)
                },
                {
                        "name" : "dom-data",
                        "plugin" : "munge",
                        "socket" : dom_sock(2)
                }
            ],
            "listen" : [
                {
                        "xprt" : LDMSD_XPRT,
                        "port" : LDMSD_PORT,
                        "auth" : "dom-comm"
                },
                {
                        "xprt" : LDMSD_XPRT,
                        "port" : LDMSD_DATA_PORT,
                        "auth" : "dom-data"
                }
            ]
        },
        "ldmsd-sampler" : {
            "!extends" : "ldmsd-base",
            "samplers" : [
                {
                     "plugin" : p,
                     "!extends" : "sampler_plugin"
                } for p in SAMPLER_PI
            ],
            "advertisers" : [
                {
                    "name" : "%agg%",
                    "host" : "%agg%",
                    "xprt" : LDMSD_XPRT,
                    "port" : LDMSD_PORT,
                    "reconnect" : RECONNECT_US
                },
            ]
        },
        "ldmsd-sampler-auth" : {
             "!extends" : "ldmsd-base-auth",
             "samplers" : [
                  {
                       "plugin" : p,
                       "!extends" : "sampler_plugin"
                  } for p in SAMPLER_PI
             ],
             "advertisers" : [
                {
                     "name" : "%agg%",
                     "host" : "%agg%",
                     "xprt" : LDMSD_XPRT,
                     "port" : LDMSD_PORT,
                     "auth" : "dom-comm",
                     "reconnect" : RECONNECT_US
                }
             ]
        },
    }, # templates
    "nodes" : [
        {
            "hostname" : "node-1",
            "daemons" : [
                {
                     "name" : "sshd",
                     "type" : "sshd"
                },
                {
                    "name" : "munged",
                    "type" : "munged"
                },
                {
                     "name" : "node-1",
                     "!extends" : "ldmsd-sampler",
                     "agg"  : "agg11",
                     "component_id" : 1,
                     "config" : [
                          "advertiser_start name=agg11"
                     ]
                }
            ]
        },
        {
             "hostname" : "node-2",
             "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd"
                },
                {
                    "name" : "munged",
                    "type" : "munged"
                },
                {
                    "name" : "node-2",
                    "!extends" : "ldmsd-sampler",
                    "agg" : "agg12",
                    "component_id" : 2,
                    "config" : [
                        f"listen xprt={LDMSD_XPRT} port={LDMSD_DATA_PORT}",
                        "advertiser_start name=agg12"
                    ]
                }
             ]
        },
        {
             "hostname" : "node-3",
             "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd"
                },
            ] + [
                {
                    "name" : f"munged-{i}",
                    "type" : "munged",
                    "dom"  : dom_name(i),
                    "key"  : dom_key(i)
                } for i in range(1, 3)
            ] + [
                {
                    "name" : "node-3",
                    "!extends" : "ldmsd-sampler-auth",
                    "agg" : "agg13",
                    "component_id" : 3,
                    "config" : [
                        "advertiser_start name=agg13"
                    ]
                }
             ]
        }
    ] + [
        {
            "hostname" : "agg11",
            "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd",
                },
                {
                    "name" : "agg11",
                    "!extends" : "ldmsd-base",
                    "updt_offset" : UPDATE_US/8,
                    "config" : [
                        f"updtr_add name=all interval={UPDATE_US} offset=%updt_offset%",
                        "updtr_prdcr_add name=all regex=.*",
                        "updtr_start name=all"
                    ]
                },
            ]
        },
        {
            "hostname" : f"agg12",
            "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd",
                },
                {
                    "name" : "agg12",
                    "!extends" : "ldmsd-base",
                    "updt_offset" : UPDATE_US/8,
                    "prdcr_listen" : [
                        {
                             "name" : "wildcard",
                             "type" : "active",
                             "advertiser_xprt" : LDMSD_XPRT,
                             "advertiser_port" : LDMSD_DATA_PORT,
                             "reconnect" : RECONNECT_US
                        }
                    ],
                    "config" : [
                        "prdcr_listen_start name=wildcard",
                        f"updtr_add name=all interval={UPDATE_US} offset=%updt_offset%",
                        "updtr_prdcr_add name=all regex=.*",
                        "updtr_start name=all"
                    ]
                },
            ]
        },
        {
            "hostname" : f"agg13",
            "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd"
                },
            ] + [
                {
                    "name" : f"munged-{i}",
                    "type" : "munged",
                    "dom"  : dom_name(i),
                    "key"  : dom_key(i)
                } for i in range(1, 3)
            ] + [
                {
                    "name" : "agg13",
                    "!extends" : "ldmsd-base-auth",
                    "updt_offset" : UPDATE_US/8,
                    "prdcr_listen" : [
                        {
                                "name" : "wildcard",
                                "type" : "active",
                                "advertiser_port" : LDMSD_DATA_PORT,
                                "advertiser_xprt" : LDMSD_XPRT,
                                "reconnect" : RECONNECT_US,
                                "advertiser_auth" : "dom-data",
                        }
                    ],
                    "config" : [
                        "prdcr_listen_start name=wildcard",
                        f"updtr_add name=all interval={UPDATE_US} offset=%updt_offset%",
                        "updtr_prdcr_add name=all regex=.*",
                        "updtr_start name=all"
                    ]
                }
            ]
        },
    ] + [
        {
            "hostname" : "agg21",
            "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd"
                },
                {
                     "name" : "agg21",
                     "!extends" : "ldmsd-base",
                     "prdcrs" : [
                        {
                            "name" : "agg11",
                            "host" : "agg11",
                            "port" : LDMSD_PORT,
                            "xprt" : LDMSD_XPRT,
                            "type" : "active",
                            "interval" : RECONNECT_US
                        }
                     ],
                     "config" : [
                        "prdcr_start_regex regex=.*",
                        f"updtr_add name=agg11 interval={UPDATE_US} offset={UPDATE_US/4}",
                        "updtr_prdcr_add name=agg11 regex=.*",
                        "updtr_start name=agg11"
                     ]
                }
            ]
        }
    ], # nodes

    "cap_add": [ "SYS_PTRACE", "SYS_ADMIN" ],
    "image": args.image,
    "ovis_prefix": PREFIX,
    "env" : { "FOO": "BAR" },
    "mounts": [
        f"{os.path.realpath(sys.path[0])}:/tada-src:ro"
    ] + args.mount +
    ( ["{0}:{0}:ro".format(SRC)] if SRC else [] ),
}

#### Utility functions ####
def ldms_ls(cont, host = "localhost", xprt = LDMSD_XPRT, port = LDMSD_PORT):
    cmd = f"bash -c 'ldms_ls -x {xprt} -p {port} -h {host}'"
    rc, out = cont.exec_run(cmd)
    if rc:
          raise Exception(f"ldms_ls -l failed with error {rc}: {out}")
    return out.splitlines()

def send_request(cont, cmd, xprt = LDMSD_XPRT, port = LDMSD_PORT, host = "localhost",
                 auth = None, auth_opt ={}):
    s = f"/tada-src/python/ldmsd_request_send.py -x {xprt} -p {port} -H {host}"
    if auth is not None:
         s += f" -a {auth}"
         for k, v in auth_opt.items():
              s += f" -A {k}={v}"
    s += f" --cmd '{cmd}'"
    errcode, out = cont.exec_run(s)
    return errcode, out.strip()

def advertiser_status(cont):
    rc, adv = send_request(cont, cmd = "prdcr_status")
    if rc != 0:
         raise Exception(f"{cont._name}: advertiser_status failed with error {rc}. {adv}")
    return json.loads(adv)

def prdcr_listen_status(cont):
    rc, pl = send_request(cont, cmd = "prdcr_listen_status")
    if rc != 0:
         raise Exception(f"{cont._name}: prdcr_listen_status failed with error {rc}. {pl}")
    return json.loads(pl)

def get_prdcrs(cont):
    if cont.hostname == 'agg13':
        errcode, prdcrs = send_request(cont, "prdcr_status", auth='munge', auth_opt={'socket': dom_sock(1)})
    else:
        errcode, prdcrs = send_request(cont, "prdcr_status")
    if errcode != 0:
         raise Exception(f"'prdcr_status' failed. Error {errcode}. {prdcrs}.")
    return json.loads(prdcrs)

def verify_prdcr(cont, exp):
    prdcrs = get_prdcrs(cont) # Get all producers
    for p in prdcrs:
        if p['type'] == get_prdcr_type_str(PRDCR_TYPE_PASSIVE | PRDCR_TYPE_ADVERTISED):
            del p['port']
            del p['reconnect_us']
    return prdcrs == exp

def verify_sets(cont, exp, exist):
    set_names = ldms_ls(cont)
    if exist:
        return all(s in set_names for s in exp)
    else:
         return all(s not in set_names for s in exp)

PRDCR_TYPE_ADVERTISED = 0b001
PRDCR_TYPE_PASSIVE    = 0b010
PRDCR_TYPE_ACTIVE     = 0b100

def get_prdcr_type_str(prdcr_type):
    if prdcr_type & PRDCR_TYPE_ADVERTISED:
        s = "advertised"
    else:
         s = ""
    if prdcr_type & PRDCR_TYPE_PASSIVE:
         s = f"{s}, passive"
    else:
         s = f"{s}, active"
    return s

def get_exp_prdcr(name, host, state, sets, type=PRDCR_TYPE_ADVERTISED|PRDCR_TYPE_PASSIVE,
                  transport="sock", port = None, auth = 'DEFAULT', reconnect = RECONNECT_US):
    e = {
        'name' : name,
        'type' : get_prdcr_type_str(type),
        'host' : host,
        'state' : state,
        'transport' : transport,
        'auth' : auth,
        'sets' : [{ 'inst_name'   : f"{host}/{s['schema']}",
                    'schema_name' : s['schema'],
                    'state'       : s['state']
                    } for s in sets]
    }

    if type & (PRDCR_TYPE_ACTIVE | PRDCR_TYPE_ADVERTISED):
        e['port'] =  port
        e['reconnect_us'] = f'{reconnect}'

    return e

def get_prdcr_name(host, port = LDMSD_PORT):
     return f"{host}:{port}"

def prdcr_listen_add_cmd(name, xprt = None, port = None, reconnect=None, auth_dom = None, rail = None):
    cmd = {'name' : name, 'type' : 'active'}
    if xprt is not None:
         cmd['advertiser_xprt'] = xprt
    if port is not None:
         cmd['advertiser_port'] = port
    if reconnect is not None:
         cmd['reconnect'] = reconnect
    if auth_dom is not None:
         cmd['advertiser_auth'] = auth_dom
    if rail is not None:
         cmd['rail'] = rail
    return "prdcr_listen_add " + " ".join(f"{k}={v}" for k, v in cmd.items())

#### Test logic ############

test = TADA.Test(test_suite = "LDMSD",
                 test_type  = "FVT",
                 test_name  = "advertisement_active_test",
                 test_desc  = "Peer daemon Advertisement Functionality, Active Advertised producers Test",
                 test_user  = args.user,
                 commit_id  = COMMIT_ID,
                 tada_addr  = args.tada_addr)

test.add_assertion("no_port", "Missing 'port' from prdcr_listen_add type=active...")
test.add_assertion("no_xprt", "Missing 'xprt' from prdcr_listen_add type=active...")
test.add_assertion("no_reconnect", "Missing 'reconnect' from prdcr_listen_add type=active...")
test.add_assertion("data_port_1", "Configure prdcr_listen with the active mode with a specific data port")
test.add_assertion('data_auth_1', "Separate advertisement channel from data channel with different authentication domains")

#### Start! ####
cluster = None
test.start()

@atexit.register
def at_exit():
    rc = test.finish()
    if cluster is not None:
        cluster.remove()
    os._exit(rc)

log.info("-- Get or create the cluster --")
cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

nodes = [node_1, node_2, node_3, node_4] = [cluster.get_container(f"node-{i}") for i in range(1, NUM_COMPUTE+1)]
agg11 = cluster.get_container("agg11")
agg12 = cluster.get_container("agg12")
agg13 = cluster.get_container("agg13")

log.info("-- Start daemons --")
cluster.start_daemons()
cluster.make_known_hosts()

log.info("... wait a bit to make sure ldmsd's are up")
time.sleep(1)

cmd1 = prdcr_listen_add_cmd(name = "pl_1", xprt = LDMSD_XPRT, reconnect = RECONNECT_US)
errcode, resp = send_request(agg11, xprt=LDMSD_XPRT, port=LDMSD_PORT, cmd=cmd1)
test.assert_test("no_port",
                 (errcode == errno.EINVAL) and (resp == f"The attribute 'advertiser_port' is required for the 'active' mode."),
                 "ldmsd returned EINVAL.")

cmd2 = prdcr_listen_add_cmd(name = "pl_2", port = LDMSD_PORT, reconnect = RECONNECT_US)
errcode, resp = send_request(agg11, xprt=LDMSD_XPRT, port=LDMSD_PORT, cmd=cmd2)
test.assert_test("no_xprt",
                 (errcode == errno.EINVAL) and (resp == f"The attribute 'advertiser_xprt' is required for the 'active' mode."),
                 "ldmsd returned EINVAL.")

cmd3 = prdcr_listen_add_cmd(name = "pl_3", port = LDMSD_PORT, xprt = LDMSD_XPRT)
errcode, resp = send_request(agg11, xprt=LDMSD_XPRT, port=LDMSD_PORT, cmd=cmd3)
test.assert_test("no_reconnect",
                 (errcode == errno.EINVAL) and (resp == f"The attribute 'reconnect' is required for the 'active' mode."),
                 "ldmsd returned EINVAL.")

exp_prdcr_node_2 = [get_exp_prdcr(name = get_prdcr_name("node-2", LDMSD_DATA_PORT),
                                  host = "node-2",
                                  state = "CONNECTED",
                                  type = PRDCR_TYPE_ADVERTISED | PRDCR_TYPE_ACTIVE,
                                  port = LDMSD_DATA_PORT,
                                  reconnect = RECONNECT_US,
                                  sets = [{'schema' : s, 'state' : 'READY'} for s in SAMPLER_PI])]
test.assert_test("data_port_1", verify_prdcr(agg12, exp_prdcr_node_2),
                 f"Producer {get_prdcr_name('node-2')} is an active, advertised producer that connected to the sampler daemon with the specified port.")

exp_prdcr_node_3 = [get_exp_prdcr(name = get_prdcr_name('node-3', LDMSD_DATA_PORT),
                                  host = "node-3",
                                  state = "CONNECTED",
                                  type = PRDCR_TYPE_ADVERTISED | PRDCR_TYPE_ACTIVE,
                                  port = LDMSD_DATA_PORT,
                                  reconnect = RECONNECT_US,
                                  auth = "dom-data",
                                  sets = [{'schema' : s, 'state' : 'READY'} for s in SAMPLER_PI])]

test.assert_test('data_auth_1', verify_prdcr(agg13, exp_prdcr_node_3),
                 f"Producer {get_prdcr_name('node-3')} is an active, advertised producer that connects to the sampler daemon with the specified authentication.")